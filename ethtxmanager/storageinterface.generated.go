// Code generated by mockery v2.45.0. DO NOT EDIT.

package ethtxmanager

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// StorageInterfaceMock is an autogenerated mock type for the StorageInterface type
type StorageInterfaceMock struct {
	mock.Mock
}

type StorageInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageInterfaceMock) EXPECT() *StorageInterfaceMock_Expecter {
	return &StorageInterfaceMock_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, mTx
func (_m *StorageInterfaceMock) Add(ctx context.Context, mTx monitoredTx) error {
	ret := _m.Called(ctx, mTx)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, monitoredTx) error); ok {
		r0 = rf(ctx, mTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageInterfaceMock_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type StorageInterfaceMock_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - mTx monitoredTx
func (_e *StorageInterfaceMock_Expecter) Add(ctx interface{}, mTx interface{}) *StorageInterfaceMock_Add_Call {
	return &StorageInterfaceMock_Add_Call{Call: _e.mock.On("Add", ctx, mTx)}
}

func (_c *StorageInterfaceMock_Add_Call) Run(run func(ctx context.Context, mTx monitoredTx)) *StorageInterfaceMock_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(monitoredTx))
	})
	return _c
}

func (_c *StorageInterfaceMock_Add_Call) Return(_a0 error) *StorageInterfaceMock_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageInterfaceMock_Add_Call) RunAndReturn(run func(context.Context, monitoredTx) error) *StorageInterfaceMock_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Empty provides a mock function with given fields: ctx
func (_m *StorageInterfaceMock) Empty(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Empty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageInterfaceMock_Empty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Empty'
type StorageInterfaceMock_Empty_Call struct {
	*mock.Call
}

// Empty is a helper method to define mock.On call
//   - ctx context.Context
func (_e *StorageInterfaceMock_Expecter) Empty(ctx interface{}) *StorageInterfaceMock_Empty_Call {
	return &StorageInterfaceMock_Empty_Call{Call: _e.mock.On("Empty", ctx)}
}

func (_c *StorageInterfaceMock_Empty_Call) Run(run func(ctx context.Context)) *StorageInterfaceMock_Empty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *StorageInterfaceMock_Empty_Call) Return(_a0 error) *StorageInterfaceMock_Empty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageInterfaceMock_Empty_Call) RunAndReturn(run func(context.Context) error) *StorageInterfaceMock_Empty_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *StorageInterfaceMock) Get(ctx context.Context, id common.Hash) (monitoredTx, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 monitoredTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (monitoredTx, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) monitoredTx); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(monitoredTx)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageInterfaceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type StorageInterfaceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id common.Hash
func (_e *StorageInterfaceMock_Expecter) Get(ctx interface{}, id interface{}) *StorageInterfaceMock_Get_Call {
	return &StorageInterfaceMock_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *StorageInterfaceMock_Get_Call) Run(run func(ctx context.Context, id common.Hash)) *StorageInterfaceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *StorageInterfaceMock_Get_Call) Return(_a0 monitoredTx, _a1 error) *StorageInterfaceMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageInterfaceMock_Get_Call) RunAndReturn(run func(context.Context, common.Hash) (monitoredTx, error)) *StorageInterfaceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByBlock provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *StorageInterfaceMock) GetByBlock(ctx context.Context, fromBlock *uint64, toBlock *uint64) ([]monitoredTx, error) {
	ret := _m.Called(ctx, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetByBlock")
	}

	var r0 []monitoredTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uint64, *uint64) ([]monitoredTx, error)); ok {
		return rf(ctx, fromBlock, toBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uint64, *uint64) []monitoredTx); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]monitoredTx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uint64, *uint64) error); ok {
		r1 = rf(ctx, fromBlock, toBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageInterfaceMock_GetByBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByBlock'
type StorageInterfaceMock_GetByBlock_Call struct {
	*mock.Call
}

// GetByBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock *uint64
//   - toBlock *uint64
func (_e *StorageInterfaceMock_Expecter) GetByBlock(ctx interface{}, fromBlock interface{}, toBlock interface{}) *StorageInterfaceMock_GetByBlock_Call {
	return &StorageInterfaceMock_GetByBlock_Call{Call: _e.mock.On("GetByBlock", ctx, fromBlock, toBlock)}
}

func (_c *StorageInterfaceMock_GetByBlock_Call) Run(run func(ctx context.Context, fromBlock *uint64, toBlock *uint64)) *StorageInterfaceMock_GetByBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uint64), args[2].(*uint64))
	})
	return _c
}

func (_c *StorageInterfaceMock_GetByBlock_Call) Return(_a0 []monitoredTx, _a1 error) *StorageInterfaceMock_GetByBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageInterfaceMock_GetByBlock_Call) RunAndReturn(run func(context.Context, *uint64, *uint64) ([]monitoredTx, error)) *StorageInterfaceMock_GetByBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetByStatus provides a mock function with given fields: ctx, statuses
func (_m *StorageInterfaceMock) GetByStatus(ctx context.Context, statuses []MonitoredTxStatus) ([]monitoredTx, error) {
	ret := _m.Called(ctx, statuses)

	if len(ret) == 0 {
		panic("no return value specified for GetByStatus")
	}

	var r0 []monitoredTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []MonitoredTxStatus) ([]monitoredTx, error)); ok {
		return rf(ctx, statuses)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []MonitoredTxStatus) []monitoredTx); ok {
		r0 = rf(ctx, statuses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]monitoredTx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []MonitoredTxStatus) error); ok {
		r1 = rf(ctx, statuses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageInterfaceMock_GetByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByStatus'
type StorageInterfaceMock_GetByStatus_Call struct {
	*mock.Call
}

// GetByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - statuses []MonitoredTxStatus
func (_e *StorageInterfaceMock_Expecter) GetByStatus(ctx interface{}, statuses interface{}) *StorageInterfaceMock_GetByStatus_Call {
	return &StorageInterfaceMock_GetByStatus_Call{Call: _e.mock.On("GetByStatus", ctx, statuses)}
}

func (_c *StorageInterfaceMock_GetByStatus_Call) Run(run func(ctx context.Context, statuses []MonitoredTxStatus)) *StorageInterfaceMock_GetByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]MonitoredTxStatus))
	})
	return _c
}

func (_c *StorageInterfaceMock_GetByStatus_Call) Return(_a0 []monitoredTx, _a1 error) *StorageInterfaceMock_GetByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageInterfaceMock_GetByStatus_Call) RunAndReturn(run func(context.Context, []MonitoredTxStatus) ([]monitoredTx, error)) *StorageInterfaceMock_GetByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, id
func (_m *StorageInterfaceMock) Remove(ctx context.Context, id common.Hash) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageInterfaceMock_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type StorageInterfaceMock_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - id common.Hash
func (_e *StorageInterfaceMock_Expecter) Remove(ctx interface{}, id interface{}) *StorageInterfaceMock_Remove_Call {
	return &StorageInterfaceMock_Remove_Call{Call: _e.mock.On("Remove", ctx, id)}
}

func (_c *StorageInterfaceMock_Remove_Call) Run(run func(ctx context.Context, id common.Hash)) *StorageInterfaceMock_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *StorageInterfaceMock_Remove_Call) Return(_a0 error) *StorageInterfaceMock_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageInterfaceMock_Remove_Call) RunAndReturn(run func(context.Context, common.Hash) error) *StorageInterfaceMock_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, mTx
func (_m *StorageInterfaceMock) Update(ctx context.Context, mTx monitoredTx) error {
	ret := _m.Called(ctx, mTx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, monitoredTx) error); ok {
		r0 = rf(ctx, mTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageInterfaceMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type StorageInterfaceMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - mTx monitoredTx
func (_e *StorageInterfaceMock_Expecter) Update(ctx interface{}, mTx interface{}) *StorageInterfaceMock_Update_Call {
	return &StorageInterfaceMock_Update_Call{Call: _e.mock.On("Update", ctx, mTx)}
}

func (_c *StorageInterfaceMock_Update_Call) Run(run func(ctx context.Context, mTx monitoredTx)) *StorageInterfaceMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(monitoredTx))
	})
	return _c
}

func (_c *StorageInterfaceMock_Update_Call) Return(_a0 error) *StorageInterfaceMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageInterfaceMock_Update_Call) RunAndReturn(run func(context.Context, monitoredTx) error) *StorageInterfaceMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageInterfaceMock creates a new instance of StorageInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageInterfaceMock {
	mock := &StorageInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
