// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	coretypes "github.com/ethereum/go-ethereum/core/types"

	mock "github.com/stretchr/testify/mock"
)

// Signer is an autogenerated mock type for the Signer type
type Signer struct {
	mock.Mock
}

type Signer_Expecter struct {
	mock *mock.Mock
}

func (_m *Signer) EXPECT() *Signer_Expecter {
	return &Signer_Expecter{mock: &_m.Mock}
}

// Initialize provides a mock function with given fields: _a0
func (_m *Signer) Initialize(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Signer_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type Signer_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Signer_Expecter) Initialize(_a0 interface{}) *Signer_Initialize_Call {
	return &Signer_Initialize_Call{Call: _e.mock.On("Initialize", _a0)}
}

func (_c *Signer_Initialize_Call) Run(run func(_a0 context.Context)) *Signer_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Signer_Initialize_Call) Return(_a0 error) *Signer_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Signer_Initialize_Call) RunAndReturn(run func(context.Context) error) *Signer_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// PublicAddress provides a mock function with no fields
func (_m *Signer) PublicAddress() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicAddress")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// Signer_PublicAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicAddress'
type Signer_PublicAddress_Call struct {
	*mock.Call
}

// PublicAddress is a helper method to define mock.On call
func (_e *Signer_Expecter) PublicAddress() *Signer_PublicAddress_Call {
	return &Signer_PublicAddress_Call{Call: _e.mock.On("PublicAddress")}
}

func (_c *Signer_PublicAddress_Call) Run(run func()) *Signer_PublicAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Signer_PublicAddress_Call) Return(_a0 common.Address) *Signer_PublicAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Signer_PublicAddress_Call) RunAndReturn(run func() common.Address) *Signer_PublicAddress_Call {
	_c.Call.Return(run)
	return _c
}

// SignHash provides a mock function with given fields: _a0, _a1
func (_m *Signer) SignHash(_a0 context.Context, _a1 common.Hash) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SignHash")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) ([]byte, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signer_SignHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignHash'
type Signer_SignHash_Call struct {
	*mock.Call
}

// SignHash is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 common.Hash
func (_e *Signer_Expecter) SignHash(_a0 interface{}, _a1 interface{}) *Signer_SignHash_Call {
	return &Signer_SignHash_Call{Call: _e.mock.On("SignHash", _a0, _a1)}
}

func (_c *Signer_SignHash_Call) Run(run func(_a0 context.Context, _a1 common.Hash)) *Signer_SignHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *Signer_SignHash_Call) Return(_a0 []byte, _a1 error) *Signer_SignHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Signer_SignHash_Call) RunAndReturn(run func(context.Context, common.Hash) ([]byte, error)) *Signer_SignHash_Call {
	_c.Call.Return(run)
	return _c
}

// SignTx provides a mock function with given fields: ctx, tx
func (_m *Signer) SignTx(ctx context.Context, tx *coretypes.Transaction) (*coretypes.Transaction, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for SignTx")
	}

	var r0 *coretypes.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coretypes.Transaction) (*coretypes.Transaction, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coretypes.Transaction) *coretypes.Transaction); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coretypes.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signer_SignTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignTx'
type Signer_SignTx_Call struct {
	*mock.Call
}

// SignTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *coretypes.Transaction
func (_e *Signer_Expecter) SignTx(ctx interface{}, tx interface{}) *Signer_SignTx_Call {
	return &Signer_SignTx_Call{Call: _e.mock.On("SignTx", ctx, tx)}
}

func (_c *Signer_SignTx_Call) Run(run func(ctx context.Context, tx *coretypes.Transaction)) *Signer_SignTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*coretypes.Transaction))
	})
	return _c
}

func (_c *Signer_SignTx_Call) Return(_a0 *coretypes.Transaction, _a1 error) *Signer_SignTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Signer_SignTx_Call) RunAndReturn(run func(context.Context, *coretypes.Transaction) (*coretypes.Transaction, error)) *Signer_SignTx_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *Signer) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Signer_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Signer_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *Signer_Expecter) String() *Signer_String_Call {
	return &Signer_String_Call{Call: _e.mock.On("String")}
}

func (_c *Signer_String_Call) Run(run func()) *Signer_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Signer_String_Call) Return(_a0 string) *Signer_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Signer_String_Call) RunAndReturn(run func() string) *Signer_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewSigner creates a new instance of Signer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Signer {
	mock := &Signer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
